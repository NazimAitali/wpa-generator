{"version":3,"sources":["assets/img/4608699.png","components/display/index.js","components/choice/index.js","App.js","reportWebVitals.js","index.js"],"names":["Display","result","KeyGen","setResult","setCopied","toast","useToast","className","steps","loop","wrapper","text","onCopy","onClick","title","description","status","duration","isClosable","width","colorScheme","size","Choice","useState","choice","setChoice","setSize","copied","src","bg","alt","style","color","marginLeft","onChange","value","direction","CleWpa","i","charAt","Math","floor","random","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.edb822f2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/4608699.10790d48.png\";","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { Button, useToast } from \"@chakra-ui/react\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport { ImCopy } from \"react-icons/im\";\r\nimport Typical from \"react-typical\";\r\n\r\nconst Display = ({ result, KeyGen, setResult, setCopied }) => {\r\n  const toast = useToast();\r\n  return (\r\n    <div className=\"display\">\r\n      <div className=\"code\">\r\n        <Typical steps={[result]} loop={1} wrapper=\"p\" />{\" \"}\r\n        {result ? (\r\n          <CopyToClipboard text={result} onCopy={() => setCopied(true)}>\r\n            <ImCopy\r\n              className=\"copy-icon\"\r\n              onClick={() =>\r\n                toast({\r\n                  title: \"Status : Copied\",\r\n                  description: \"Key a was copied to the clipboard.\",\r\n                  status: \"success\",\r\n                  duration: 900,\r\n                  isClosable: true,\r\n                })\r\n              }\r\n            />\r\n          </CopyToClipboard>\r\n        ) : null}\r\n      </div>\r\n      <div className=\"generate\">\r\n        <Button\r\n          width=\"200px\"\r\n          colorScheme=\"teal\"\r\n          size=\"lg\"\r\n          onClick={() => (\r\n            KeyGen(),\r\n            setCopied(false),\r\n            toast({\r\n              title: \"Status : Generate\",\r\n              description: \"Key is generated.\",\r\n              status: \"success\",\r\n              duration: 900,\r\n              isClosable: true,\r\n            })\r\n          )}\r\n        >\r\n          <div className=\"btn-name\">Generate</div>\r\n        </Button>\r\n        <Button\r\n          width=\"200px\"\r\n          colorScheme=\"teal\"\r\n          size=\"lg\"\r\n          onClick={() => (setResult(\"\"), setCopied(false))}\r\n        >\r\n          <div className=\"btn-name\">Clean</div>\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Display;\r\n","import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\nimport { Radio, RadioGroup, Stack } from \"@chakra-ui/react\";\r\nimport { ImCheckboxUnchecked, ImCheckboxChecked } from \"react-icons/im\";\r\nimport bg from \"../../assets/img/4608699.png\";\r\nimport Display from \"../display\";\r\n\r\nconst Choice = () => {\r\n  const [choice, setChoice] = useState(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\r\n  const [size, setSize] = useState(\"8\");\r\n  const [result, setResult] = useState(\"\");\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  const KeyGen = () => {\r\n    let CleWpa = \"\";\r\n\r\n    for (let i = 0; i < size; i++)\r\n      CleWpa += choice.charAt(Math.floor(Math.random() * choice.length));\r\n\r\n    return setResult(CleWpa);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"options\">\r\n        <div className=\"left\">\r\n          <img className=\"bg-img\" src={bg} alt=\"img\" />\r\n          <div className=\"titre\">KEY-GENERATOR</div>\r\n          <div className=\"status\">\r\n            <div className=\"status-state\">\r\n              {copied ? (\r\n                <>\r\n                  {\" \"}\r\n                  <ImCheckboxChecked style={{ color: \"#FFC800\" }} />\r\n                  <div style={{ color: \"#FFC800\", marginLeft: \"4%\" }}>\r\n                    Copied\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <ImCheckboxUnchecked style={{ color: \"gray\" }} />\r\n                  <div style={{ color: \"gray\", marginLeft: \"4%\" }}>Copied</div>\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className=\"status-state\">\r\n              {result ? (\r\n                <>\r\n                  {\" \"}\r\n                  <ImCheckboxChecked style={{ color: \"#FFC800\" }} />\r\n                  <div style={{ color: \"#FFC800\", marginLeft: \"4%\" }}>\r\n                    Generate\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <ImCheckboxUnchecked style={{ color: \"gray\" }} />\r\n                  <div style={{ color: \"gray\", marginLeft: \"4%\" }}>\r\n                    Generate\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"right\">\r\n          <div className=\"selection\">\r\n            {\" \"}\r\n            <div className=\"selection-contente\">\r\n              <label className=\"label\">Complexity :</label>\r\n              <RadioGroup onChange={setChoice} value={choice}>\r\n                <Stack direction=\"column\">\r\n                  <Radio value=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\">\r\n                    Simple 64 bits\r\n                  </Radio>\r\n                  <Radio value=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\">\r\n                    Medium 160 bits\r\n                  </Radio>\r\n                  <Radio value=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-.;:,?!*%ù$=)àç_è-()é²'^@]}`|[#~\">\r\n                    Complex 504 bits\r\n                  </Radio>\r\n                </Stack>\r\n              </RadioGroup>\r\n            </div>\r\n            <div className=\"selection-contente\">\r\n              <label className=\"label\">Length :</label>\r\n              <RadioGroup onChange={setSize} value={size}>\r\n                <Stack direction=\"column\">\r\n                  <Radio value=\"8\">WPA (8 characters)</Radio>\r\n                  <Radio value=\"20\">WPA 2 (20 characters)</Radio>\r\n                  <Radio value=\"60\">WPA 2 (63 characters)</Radio>\r\n                </Stack>\r\n              </RadioGroup>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Display\r\n        copied={copied}\r\n        setCopied={setCopied}\r\n        KeyGen={KeyGen}\r\n        result={result}\r\n        setResult={setResult}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Choice;\r\n","import \"./App.css\";\nimport Choice from \"./components/choice\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Choice />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <App />\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}